% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_sim.R
\name{power_sim}
\alias{power_sim}
\title{power_sim: Calculates power for hierarchical models using simulation and case bootstrap}
\usage{
power_sim(
  data,
  y = NA,
  years = 1:5,
  ID = "Plot_Name",
  random_type = c("intercept", "slope"),
  num_reps = 100,
  num_pwr_reps = 100,
  error_dist = c("nonpar", "normal"),
  sampling_data = NA,
  sampling_sd = NA,
  var_hist = FALSE,
  effect_size = seq(-50, 50, 5),
  pos_val = TRUE,
  upper_val = NA,
  sample_size = seq(10, 100, 10),
  chatty = TRUE,
  parallel = TRUE
)
}
\arguments{
\item{data}{Data frame containing an ID column that identifies each sample unit
(e.g., Plot_Name), and at least one column with a response variable.}

\item{y}{Quoted response variable in the data frame. Must be numeric.}

\item{years}{Vector of years to run simulation out to. Default is 1:5 years.}

\item{ID}{Quoted name of column containing site or plot IDs. Default is "Plot_Name",
and assumes the first 4 characters
are a park code.}

\item{random_type}{Specify "intercept" or "slope". The intercept option (default)
will fit a random intercept model
with (1|ID) as random component. The slope option will fit a random slope model
with (1 + year|ID) as the random component.}

\item{num_reps}{Number of replicate bootstraps to run for each level of effect
and sample size. Default is 100 for faster testing. However, 500-1000 is the
better number for real analyses (note this could take many hours).}

\item{num_pwr_reps}{Number of replicates to run for each level of effect
and sample size to calculate power. Default is 100 for faster testing.
However, 250+ is the better number for real analyses (note this could take many hours).}

\item{error_dist}{Either "nonpar" or "normal". If nonpar is chosen, must specify
a dataset of repeated measures, like from QA/QC sampling, to generate an error
distribution based on the data. If normal is chosen, then a normal distribution
will be used. This will be used to add sampling error to simulated trends that
are at an appropriate scale to the dataset.}

\item{sampling_data}{If error_dist = 'nonpar', specify a dataset that has
repeated measures for sites. Otherwise leave blank. The columns in the sampling
data should include a unique ID column that is specified via the ID argument,
and two columns for each sample named samp1 and samp2. The samp1 column is
the first sample of the data. The samp2 column is the replicate sample of the site.}

\item{sampling_sd}{If error_dist = 'normal', must specify the standard deviation
for the distribution. Otherwise leave blank.}

\item{var_hist}{TRUE or FALSE. If TRUE, plots a histogram of 1e6 calls from the random
variance function. If FALSE (default) doesn't plot anything.}

\item{effect_size}{The range of effect sizes to test. The default is -50 to 50\%
change at 5\% increments. Effect sizes represent the percent change per time step
rather than change across the entire study. If 0 is included, the resulting power
reflects the false positive rate.}

\item{pos_val}{TRUE (default) or FALSE. If TRUE, any simulated value that is negative
will be converted to 0. If FALSE, negative simulated values will be allowed.}

\item{upper_val}{Use this to specify a ceiling to the data. For example, if data
are percents and can't be greater than 1.0, then upper_val = 1. Otherwise leave blank.}

\item{sample_size}{The range of sample sizes to test. The default is 10 to 100
in increments of 10.}

\item{chatty}{TRUE or FALSE. TRUE (default) will print progress in the console,
including the number of the power sample currently running and a tick for every
replicate within the power bootstrap. FALSE will not print progress in console.}

\item{parallel}{TRUE or FALSE. If TRUE, power simulation will use parallel
processing across the machine's total number of cores.}
}
\value{
A data frame that contains a row for every effect size and sample size
combination (power combination) and the power to detect trends. The process uses
case_boot_power() to bootstrap the original dataset with replacement for each
sample size, with each bootstrap sample size equaling the specified sample size.
For each of these datasets, trends are simulated using the specified effect sizes
plus random sampling error, with each year's trend based on the previous year's
value, rather than the starting point. Then case_boot_lmer() is used to determine
whether there's a significant trend for each power combination. Finally, this process
is repeated num_reps number of times to calculate power, which is the percent
of trends that are significant divided by the num_reps.
}
\description{
Fits models using a range of effect and samples sizes using non-parametric
bootstrapping to assess significance. For each level of effect size and sample size,
returns the power to detect the trend, along with average lower and upper 95\% confidence
intervals for each combination across the replicate bootstraps.
}
\examples{
\dontrun{

 #--- Generate fake datasets
 # sample data
 site = paste0("site.", sprintf("\%02d", rep(1:30))) # vector of 30 site names
 y = runif(30) # random data for 30 sites
 yq = y[1:10] + rnorm(10, mean = 0, sd = 0.2) # qaqc data for first 30 sites generated
   #  by y0 value plus random sampling error
 ydiff <- y[1:10] - yq # vector of differences between initial y and qaqc y

 # QAQC error distribution
 rvar <- pdqr::new_r(ydiff, type = 'continuous')
 rvar(1) #check that it works- should generate a random value from the distribution of ydiff

 mean(rvar(1000)) # should be ~ 0 with fake dataset
 sd(rvar(1000)) # should be ~ 0.2 with fake dataset

 # combine data frames
 dat <- data.frame(site = site, y = y, qaqc = FALSE) # original dataframe
 dat_qc <- data.frame(site = site[1:10], y = yq, qaqc = TRUE) # qaqc dataframe from first 10 sites

 dat_qc_wide <- dplyr::right_join(dat, dat_qc, by = "site", suffix = c("1", "2")) \%>\%
   rename(samp1 = y1, samp2 = y2)

 #-- Run function
 # Non-parametric sampling error
 pwr_np <- forestTrends::power_sim(dat, y = 'y', ID = 'site', random_type = 'intercept',
             error_dist = 'nonpar', sampling_data = dat_qc_wide, num_reps = 100,
             effect_size = seq(-20, 20, 5), pos_val = TRUE, var_hist = TRUE,
             sample_size = c(10, 25, 50, 100))

 # Normal sampling error that allows negative simulated values
 pwr_norm <- forestTrends::power_sim(dat, y = 'y', ID = 'site', random_type = 'intercept',
               error_dist = 'normal', sampling_sd = 0.2, num_reps = 100,
               effect_size = seq(-20, 20, 5), pos_val = FALSE, var_hist = TRUE,
               sample_size = c(10, 25, 50, 100))
}

}
