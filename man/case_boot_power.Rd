% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/case_boot_power.R
\name{case_boot_power}
\alias{case_boot_power}
\title{case_boot_power: Samples original data and simulate trends over a range of effect and sample sizes}
\usage{
case_boot_power(
  data,
  y = NA,
  years = 1:5,
  ID = "Plot_Name",
  random_type = c("intercept", "slope"),
  error_dist = c("nonpar", "normal"),
  sampling_data = NA,
  sampling_sd = NA,
  effect_size = seq(-50, 50, 5),
  sample_size = seq(10, 100, 10)
)
}
\arguments{
\item{data}{Data frame containing an ID column that identifies each sample unit (e.g., Plot_Name), a column containing a time
variable, and at least one column with a response variable.}

\item{y}{Quoted response variable in the data frame. Must be numeric.}

\item{years}{Vector of years to run simulation out to. Default is 1:5 years.}

\item{ID}{Quoted name of column containing site or plot IDs. Default is "Plot_Name", and assumes the first 4 characters
are a park code.}

\item{random_type}{Specify "intercept" or "slope". The intercept option (default) will fit a random intercept model
with (1|ID) as random component. The slope option will fit a random slope model with (1 + year|ID) as the random component.}

\item{error_dist}{Either "nonpar" or "normal". If nonpar is chosen, must specify a dataset of repeated measures, like
from QA/QC sampling, to generate an error distribution based on the data. If normal is chosen, then a normal distribution
will be used. This will be used to add sampling error to simulated trends that are at an appropriate scale to the dataset.}

\item{sampling_data}{If error_dist = 'nonpar', specify a dataset that has repeated measures for sites. Otherwise leave blank.
The columns in the sampling data should include a unique ID column that is specified via the ID argument, and two columns
for each sample named samp1 and samp2. The samp1 column is the first sample of the data. The samp2 column is the replicate
sample of the site.}

\item{sampling_sd}{If error_dist = 'normal', must specify the standard deviation  for the distribution. Otherwise leave blank.}

\item{effect_size}{The range of effect sizes to test. The default is -50 to 50\% change at 5\% increments.}

\item{sample_size}{The range of sample sizes to test. The default is 10 to 100 in increments of 10.}
}
\value{
a data.frame with simulated trends
}
\description{
Creates a bootstrapped sample of plots with replacement to simulate trends for a range of effect
and sample sizes, and returns model output for the specified effect, sample sizes and number of bootstraps
specified by num_reps. Only enabled for lmer(). Internal function used in power_sim().
}
\examples{
\dontrun{
 ### Generate fake datasets
 # sample data
 site = paste0("site.", sprintf("\\%02d", rep(1:30))) # vector of 30 site names
 y = runif(30) # random data for 30 sites
 yq = y[1:10] + rnorm(10, mean = 0, sd = 0.2) # qaqc data for first 30 sites generated
   #  by y0 value plus random sampling error
 ydiff <- y[1:10] - yq # vector of differences between initial y and qaqc y

 # QAQC error distribution
 rvar <- pdqr::new_r(ydiff, type = 'continuous')
 rvar(1) #check that it works- should generate a random value from the distribution of ydiff

 mean(rvar(1000)) # should be ~ 0 with fake dataset
 sd(rvar(1000)) # should be ~ 0.2 with fake dataset

 # combine data frames
 dat <- data.frame(site = site, y = y, qaqc = FALSE) # original dataframe
 dat_qc <- data.frame(site = site[1:10], y = yq, qaqc = TRUE) # qaqc dataframe from first 10 sites

 dat_qc_wide <- dplyr::right_join(dat, dat_qc, by = "site", suffix = c("1", "2")) \\%>\\%
   rename(samp1 = y1, samp2 = y2)

 ### Run function
 # Non-parametric sampling error
 sim_np <- forestTrends::case_boot_power(dat, y = 'y', ID = 'site', random_type = 'intercept',
             error_dist = 'nonpar', sampling_data = dat_qc_wide,
             effect_size = seq(-20, 20, 5), sample_size = c(10, 25, 50, 100))

 # Normal sampling error
 sim_norm <- forestTrends::case_boot_power(dat, y = 'y', ID = 'site', random_type = 'intercept',
               error_dist = 'normal', sampling_sd = 0.2,
               effect_size = seq(-20, 20, 5), sample_size = c(10, 25, 50, 100))
}


}
